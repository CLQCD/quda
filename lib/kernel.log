dslash_quda.cu:    KernelType kernel_type; //is it INTERIOR_KERNEL, EXTERIOR_KERNEL_X/Y/Z/T
dslash_quda.cu:#define MORE_GENERIC_DSLASH(FUNC, DAG, X, kernel_type, gridDim, blockDim, shared, stream, param,  ...) \
dslash_quda.cu:      FUNC ## 18 ## DAG ## Kernel<kernel_type><<<gridDim, blockDim, shared, stream>>> ( __VA_ARGS__ , param); \
dslash_quda.cu:      FUNC ## 12 ## DAG ## Kernel<kernel_type><<<gridDim, blockDim, shared, stream>>> ( __VA_ARGS__ , param); \
dslash_quda.cu:      FUNC ## 8 ## DAG ## Kernel<kernel_type><<<gridDim, blockDim, shared, stream>>> ( __VA_ARGS__, param); \
dslash_quda.cu:      FUNC ## 18 ## DAG ## X ## Kernel<kernel_type><<<gridDim, blockDim, shared, stream>>> ( __VA_ARGS__, param); \
dslash_quda.cu:      FUNC ## 12 ## DAG ## X ## Kernel<kernel_type><<<gridDim, blockDim, shared, stream>>> ( __VA_ARGS__, param); \
dslash_quda.cu:      FUNC ## 8 ## DAG ## X ## Kernel<kernel_type> <<<gridDim, blockDim, shared, stream>>> ( __VA_ARGS__, param); \
dslash_quda.cu:  switch(param.kernel_type) {						\
dslash_quda.cu:    errorQuda("KernelType %d not defined for single GPU", param.kernel_type); \
dslash_quda.cu:  switch(param.kernel_type) {						\
dslash_quda.cu:#define MORE_GENERIC_ASYM_DSLASH(FUNC, DAG, X, kernel_type, gridDim, blockDim, shared, stream, param,  ...) \
dslash_quda.cu:    FUNC ## 18 ## DAG ## X ## Kernel<kernel_type><<<gridDim, blockDim, shared, stream>>> ( __VA_ARGS__, param); \
dslash_quda.cu:    FUNC ## 12 ## DAG ## X ## Kernel<kernel_type><<<gridDim, blockDim, shared, stream>>> ( __VA_ARGS__, param); \
dslash_quda.cu:    FUNC ## 8 ## DAG ## X ## Kernel<kernel_type> <<<gridDim, blockDim, shared, stream>>> ( __VA_ARGS__, param); \
dslash_quda.cu:  switch(param.kernel_type) {						\
dslash_quda.cu:    errorQuda("KernelType %d not defined for single GPU", param.kernel_type); \
dslash_quda.cu:  switch(param.kernel_type) {						\
dslash_quda.cu:#define MORE_GENERIC_NDEG_TM_DSLASH(FUNC, DAG, X, kernel_type, gridDim, blockDim, shared, stream, param,  ...) \
dslash_quda.cu:      FUNC ## 18 ## DAG ## Twist ## Kernel<kernel_type><<<gridDim, blockDim, shared, stream>>> ( __VA_ARGS__ , param); \
dslash_quda.cu:      FUNC ## 12 ## DAG ## Twist ## Kernel<kernel_type><<<gridDim, blockDim, shared, stream>>> ( __VA_ARGS__ , param); \
dslash_quda.cu:      FUNC ## 8 ## DAG ## Twist ## Kernel<kernel_type><<<gridDim, blockDim, shared, stream>>> ( __VA_ARGS__, param); \
dslash_quda.cu:      FUNC ## 18 ## DAG ## Twist ## X ## Kernel<kernel_type><<<gridDim, blockDim, shared, stream>>> ( __VA_ARGS__, param); \
dslash_quda.cu:      FUNC ## 12 ## DAG ## Twist ## X ## Kernel<kernel_type><<<gridDim, blockDim, shared, stream>>> ( __VA_ARGS__, param); \
dslash_quda.cu:      FUNC ## 8 ## DAG ## Twist ## X ## Kernel<kernel_type> <<<gridDim, blockDim, shared, stream>>> ( __VA_ARGS__, param); \
dslash_quda.cu:      FUNC ## 18 ## DAG ## Kernel<kernel_type><<<gridDim, blockDim, shared, stream>>> ( __VA_ARGS__ , param); \
dslash_quda.cu:      FUNC ## 12 ## DAG ## Kernel<kernel_type><<<gridDim, blockDim, shared, stream>>> ( __VA_ARGS__ , param); \
dslash_quda.cu:      FUNC ## 8 ## DAG ## Kernel<kernel_type><<<gridDim, blockDim, shared, stream>>> ( __VA_ARGS__, param); \
dslash_quda.cu:      FUNC ## 18 ## DAG ## X ## Kernel<kernel_type><<<gridDim, blockDim, shared, stream>>> ( __VA_ARGS__, param); \
dslash_quda.cu:      FUNC ## 12 ## DAG ## X ## Kernel<kernel_type><<<gridDim, blockDim, shared, stream>>> ( __VA_ARGS__, param); \
dslash_quda.cu:      FUNC ## 8 ## DAG ## X ## Kernel<kernel_type> <<<gridDim, blockDim, shared, stream>>> ( __VA_ARGS__, param); \
dslash_quda.cu:  switch(param.kernel_type) {						\
dslash_quda.cu:    errorQuda("KernelType %d not defined for single GPU", param.kernel_type); \
dslash_quda.cu:  switch(param.kernel_type) {						\
dslash_quda.cu:      if (dslashParam.kernel_type < 5) { // exterior kernel
dslash_quda.cu:      if (dslashParam.kernel_type < 5) { // exterior kernel
dslash_quda.cu:    switch (dslashParam.kernel_type) {
dslash_quda.cu:    if (dslashParam.kernel_type == INTERIOR_KERNEL) {
dslash_quda.cu:      if (dslashParam.kernel_type != INTERIOR_KERNEL) return DslashCuda::advanceSharedBytes(param);
dslash_quda.cu:      if (dslashParam.kernel_type != INTERIOR_KERNEL) return DslashCuda::advanceBlockDim(param);
dslash_quda.cu:      if (dslashParam.kernel_type != INTERIOR_KERNEL) return DslashCuda::initTuneParam(param);
dslash_quda.cu:      if (dslashParam.kernel_type != INTERIOR_KERNEL) DslashCuda::defaultTuneParam(param);
dslash_quda.cu:      if (dslashParam.kernel_type == INTERIOR_KERNEL) { // Interior kernels use shared memory for common iunput
dslash_quda.cu:      if (dslashParam.kernel_type == EXTERIOR_KERNEL_X) 
dslash_quda.cu:      if (dslashParam.kernel_type == INTERIOR_KERNEL) {
dslash_quda.cu:      if (dslashParam.kernel_type == EXTERIOR_KERNEL_X) 
dslash_quda.cu:      if (dslashParam.kernel_type == INTERIOR_KERNEL) {
dslash_quda.cu:      if (dslashParam.kernel_type == EXTERIOR_KERNEL_X) 
dslash_quda.cu:      if (dslashParam.kernel_type == INTERIOR_KERNEL) {
dslash_quda.cu:      if (dslashParam.kernel_type == EXTERIOR_KERNEL_X) 
dslash_quda.cu:    dslashParam.kernel_type = INTERIOR_KERNEL;
dslash_quda.cu:	  dslashParam.kernel_type = static_cast<KernelType>(i);
dw_dslash4_def.h:template <KernelType kernel_type>
dw_dslash5_def.h:template <KernelType kernel_type>
dw_dslash5inv_def.h:template <KernelType kernel_type>
dw_dslash_def.h:template <KernelType kernel_type>
llfat_core.h:  if(kparam.kernel_type == LLFAT_EXTERIOR_KERNEL_FWD_X && x1 != X1m1) return;
llfat_core.h:  if(kparam.kernel_type == LLFAT_EXTERIOR_KERNEL_BACK_X && x1 != 0) return;
llfat_core.h:  if(kparam.kernel_type == LLFAT_EXTERIOR_KERNEL_FWD_Y && x2 != X2m1) return;
llfat_core.h:  if(kparam.kernel_type == LLFAT_EXTERIOR_KERNEL_BACK_Y && x2 != 0) return;
llfat_core.h:  if(kparam.kernel_type == LLFAT_EXTERIOR_KERNEL_FWD_Z && x3 != X3m1) return;
llfat_core.h:  if(kparam.kernel_type == LLFAT_EXTERIOR_KERNEL_BACK_Z && x3 != 0) return;
llfat_core.h:  if(kparam.kernel_type == LLFAT_EXTERIOR_KERNEL_FWD_T && x4 != X4m1) return;
llfat_core.h:  if(kparam.kernel_type == LLFAT_EXTERIOR_KERNEL_BACK_T && x4 != 0) return;
llfat_core.h:  if(kparam.kernel_type == LLFAT_INTERIOR_KERNEL){
llfat_core.h:  if(kparam.kernel_type == LLFAT_EXTERIOR_KERNEL_FWD_X && x1 != X1m1) return;
llfat_core.h:  if(kparam.kernel_type == LLFAT_EXTERIOR_KERNEL_BACK_X && x1 != 0) return;
llfat_core.h:  if(kparam.kernel_type == LLFAT_EXTERIOR_KERNEL_FWD_Y && x2 != X2m1) return;
llfat_core.h:  if(kparam.kernel_type == LLFAT_EXTERIOR_KERNEL_BACK_Y && x2 != 0) return;
llfat_core.h:  if(kparam.kernel_type == LLFAT_EXTERIOR_KERNEL_FWD_Z && x3 != X3m1) return;
llfat_core.h:  if(kparam.kernel_type == LLFAT_EXTERIOR_KERNEL_BACK_Z && x3 != 0) return;
llfat_core.h:  if(kparam.kernel_type == LLFAT_EXTERIOR_KERNEL_FWD_T && x4 != X4m1) return;
llfat_core.h:  if(kparam.kernel_type == LLFAT_EXTERIOR_KERNEL_BACK_T && x4 != 0) return;
llfat_core.h:    if(kparam.kernel_type == LLFAT_INTERIOR_KERNEL){
llfat_core.h:    if(kparam.kernel_type == LLFAT_INTERIOR_KERNEL){
llfat_quda_itf.cpp:	    kparam.kernel_type = ktype[2*k];
llfat_quda_itf.cpp:	    kparam.kernel_type = ktype[2*k+1];
llfat_quda_itf.cpp:	  kparam.kernel_type = LLFAT_INTERIOR_KERNEL;
llfat_quda_itf.cpp:	  kparam.kernel_type = LLFAT_INTERIOR_KERNEL;
llfat_quda_itf.cpp:		kparam.kernel_type = ktype[2*k];	    
llfat_quda_itf.cpp:		kparam.kernel_type = ktype[2*k+1];	    
llfat_quda_itf.cpp:	      kparam.kernel_type = LLFAT_INTERIOR_KERNEL;
llfat_quda_itf.cpp:		  kparam.kernel_type = LLFAT_INTERIOR_KERNEL;
mdw_dslash4_def.h:template <KernelType kernel_type>
mdw_dslash4pre_def.h:template <KernelType kernel_type>
mdw_dslash5_def.h:template <KernelType kernel_type>
mdw_dslash5inv_def.h:template <KernelType kernel_type>
staggered_dslash_def.h:template <KernelType kernel_type>
tm_dslash_def.h:template <KernelType kernel_type>
tm_dslash_def.h:template <KernelType kernel_type>
tm_dslash_def.h:template <KernelType kernel_type>
tm_ndeg_dslash_def.h:template <KernelType kernel_type>
wilson_dslash_def.h:template <KernelType kernel_type>
